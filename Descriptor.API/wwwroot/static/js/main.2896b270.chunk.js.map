{"version":3,"sources":["session/userManager.js","home/index.js","Header.js","Main.js","session/LoginPage.js","Entry.js","actions/index.js","reducers/subscriptions.js","reducers/index.js","store.js","session/CallbackPage.js","App.js","serviceWorker.js","index.js"],"names":["userManagerConfig","client_id","redirect_uri","concat","window","location","protocol","hostname","port","response_type","scope","authority","process","silent_redirect_uri","automaticSilentRenew","filterProtocolClaims","loadUserInfo","post_logout_redirect_uri","userManager","createUserManager","Home","logout","signoutRedirect","react_default","a","createElement","Component","Header","href","onClick","this","Main","src_Header","react_router","exact","path","component","LoginPage","redirect","signinRedirect","catch","error","console","setTimeout","_this","props","isLoadingUser","React","connect","state","oidc","dispatch","Entry","user","expired","session_LoginPage","src_Main","withRouter","LOAD_SUBSCRIPTIONS_SUCCESS","initialState","channels","reducers","combineReducers","oidcReducer","subscriptions","arguments","length","undefined","action","type","SESSION_TERMINATED","USER_EXPIRED","Object","assign","payload","store","compose","applyMiddleware","next","log","getState","createStore","createStoreWithMiddleware","__REDUX_DEVTOOLS_EXTENSION__","loadUser","CallbackPage","redux_oidc","successCallback","history","push","errorCallback","App","es","Boolean","match","pathname","processSilentRenew","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2896b270.chunk.js","sourcesContent":["import { createUserManager } from 'redux-oidc';\r\n\r\nconst userManagerConfig = {\r\n  client_id: 'js',\r\n  redirect_uri: `${window.location.protocol}//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}/callback`,\r\n  response_type: 'token id_token',\r\n  scope: 'openid profile descriptor',\r\n  authority: process.env.REACT_APP_IDENTITY_HOST,\r\n  silent_redirect_uri: `${window.location.protocol}//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}/silent-renew`,\r\n  automaticSilentRenew: true,\r\n  filterProtocolClaims: true,\r\n  loadUserInfo: true,\r\n  post_logout_redirect_uri: `${window.location.protocol}//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}/`,\r\n};\r\n\r\nconst userManager = createUserManager(userManagerConfig);\r\nexport default userManager;","import React, { Component } from 'react';\r\nimport userManager from '../session/userManager';\r\n\r\nclass Home extends Component {\r\n\r\n  logout = () => {\r\n    userManager.signoutRedirect();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>Home</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react'\r\nimport userManager from './session/userManager';\r\n\r\nclass Header extends Component {\r\n\r\n  logout = () => {\r\n    userManager.signoutRedirect();\r\n  }\r\n\r\n  render() {\r\n    return (<div>\r\n      <a href=\"#\" onClick={this.logout}>Logout</a>\r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home';\r\nimport Header from './Header'\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Header />\r\n    <Switch>\r\n      <Route exact path='/' component={Home} />\r\n    </Switch>\r\n  </main>\r\n)\r\n\r\nexport default Main","import React from \"react\";\r\nimport userManager from \"./userManager\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n  componentWillMount() {\r\n    if (this.props.isLoadingUser) {\r\n      this.redirect();\r\n    }\r\n  }\r\n\r\n  redirect = () => {\r\n    userManager.signinRedirect().catch(error => {\r\n      console.error(error);\r\n      setTimeout(() => {\r\n        this.redirect();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>Redirecting...</div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoadingUser: state.oidc.isLoadingUser\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    dispatch\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Main from './Main'\r\nimport LoginPage from './session/LoginPage';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass Entry extends Component {\r\n\r\n  render() {\r\n    let user = this.props.user;\r\n\r\n    if (!user || user.expired) {\r\n      return <LoginPage />\r\n    }\r\n    else {\r\n      return <div>\r\n        <Main />\r\n      </div>\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    user: state.oidc.user\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    dispatch\r\n  };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Entry));\r\n","export const LOAD_SUBSCRIPTIONS_START =\r\n  \"redux-oidc/LOAD_SUBSCRIPTIONS_START\";\r\nexport const LOAD_SUBSCRIPTIONS_SUCCESS =\r\n  \"redux-oidc/LOAD_SUBSCRIPTIONS_SUCCESS\";\r\n\r\nexport function loadSubscriptionsStart() {\r\n  return {\r\n    type: LOAD_SUBSCRIPTIONS_START\r\n  };\r\n}\r\n\r\nexport function loadSubscriptionsSuccess(channels) {\r\n  return {\r\n    type: LOAD_SUBSCRIPTIONS_SUCCESS,\r\n    payload: channels\r\n  };\r\n}","import { LOAD_SUBSCRIPTIONS_SUCCESS } from \"../actions\";\r\nimport { SESSION_TERMINATED, USER_EXPIRED } from \"redux-oidc\";\r\n\r\nconst initialState = {\r\n  channels: []\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SESSION_TERMINATED:\r\n    case USER_EXPIRED:\r\n      return Object.assign({}, state, { channels: [] });\r\n    case LOAD_SUBSCRIPTIONS_SUCCESS:\r\n      return Object.assign({}, state, { channels: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { reducer as oidcReducer } from 'redux-oidc';\r\nimport subscriptionsReducer from './subscriptions';\r\n\r\nconst reducers = combineReducers(\r\n  {\r\n    oidc: oidcReducer,\r\n    subscriptions: subscriptionsReducer\r\n  }\r\n);\r\n\r\nexport default reducers;","import { createStore, applyMiddleware, compose } from \"redux\";\r\n\r\nimport { loadUser } from \"redux-oidc\";\r\nimport reducers from \"./reducers\";\r\nimport userManager from \"./session/userManager\";\r\n\r\nconst loggerMiddleware = store => next => action => {\r\n  console.log(\"Action type:\", action.type);\r\n  console.log(\"Action payload:\", action.payload);\r\n  console.log(\"State before:\", store.getState());\r\n  next(action);\r\n  console.log(\"State after:\", store.getState());\r\n};\r\n\r\nconst initialState = {};\r\n\r\nconst createStoreWithMiddleware = compose(\r\n  applyMiddleware(loggerMiddleware)\r\n)(createStore);\r\n\r\nconst store = createStoreWithMiddleware(reducers, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nloadUser(store, userManager);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { CallbackComponent } from \"redux-oidc\";\r\nimport userManager from \"./userManager\";\r\n\r\nclass CallbackPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <CallbackComponent\r\n                userManager={userManager}\r\n                successCallback={() => {\r\n                    console.log('success');\r\n                    this.props.history.push(\"/\");\r\n                }}\r\n                errorCallback={error => {\r\n                    console.error(error);\r\n                    this.props.history.push(\"/\");\r\n                }}>\r\n                <div>Redirecting...</div>\r\n            </CallbackComponent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(CallbackPage);","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { OidcProvider } from 'redux-oidc';\r\nimport Entry from './Entry'\r\nimport store from './store';\r\nimport userManager from './session/userManager';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport CallbackPage from './session/CallbackPage'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <OidcProvider store={store} userManager={userManager}>\r\n          <div>\r\n            <Switch>\r\n              <Route exact path='/callback' component={CallbackPage} />\r\n              <Route path='/' component={Entry} />\r\n            </Switch>\r\n          </div>\r\n        </OidcProvider>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { processSilentRenew } from 'redux-oidc';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nif (window.location.pathname === '/silent-renew') {\r\n    processSilentRenew();\r\n} else {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}